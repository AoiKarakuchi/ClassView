<% provide :title, "Home" %>

<div class="container">
  <%# alertなどが表示されるようにしました %>
  <% flash.each do |key, value| %>
    <div class="alert alert-<%= key %>">
      <%= value %>
    </div>
  <% end %>
  <div class="form-group">
    <label for="year">年度:</label>
    <select id="year">
      <% (2022..2025).each do |y| %>
        <option value="<%= y %>" <%= "selected" if y == Time.now.year %>><%= y %>年度</option>
      <% end %>
    </select>

    <select id="term">
        <option value="春A">春A</option>
        <option value="春B">春B</option>
        <option value="春C">春C</option>
        <option value="夏季休業中">夏季休業中</option>
        <option value="秋A">秋A</option>
        <option value="秋B">秋B</option>
        <option value="秋C">秋C</option>
        <option value="春季休業中">春季休業中</option>
        <option value="通年">通年</option>
    </select>
  </div>

  <h1 id="semester">春A</h1>
  <table id="timetable" border="1" cellspacing="0" cellpadding="5">
    <thead>
      <tr>
        <th></th>
        <th>月</th>
        <th>火</th>
        <th>水</th>
        <th>木</th>
        <th>金</th>
        <th class="sat">土</th>
      </tr>
    </thead>
    <tbody>
      <!-- 1限〜6限の行を作る -->
      <% (1..8).each do |period| %>
        <tr class="<%= 'extra' if period >= 7 %>">
          <td><%= period %></td>
          <td data-day="月" data-period="<%= period %>"></td>
          <td data-day="火" data-period="<%= period %>"></td>
          <td data-day="水" data-period="<%= period %>"></td>
          <td data-day="木" data-period="<%= period %>"></td>
          <td data-day="金" data-period="<%= period %>"></td>
          <td class="sat" data-day="土" data-period="<%= period %>"></td>
        </tr>
      <% end %>
    </tbody>
  </table>
  <div class="toggle-buttons">
    <button onclick="toggleSaturday()">土曜日 表示切替</button>
    <button onclick="toggleExtra()">7・8限 表示切替</button>
  </div>
  <br>
  <h4>その他授業</h4>
  <div id="non_period_subjects"><em>該当科目がここに表示されます</em></div><br>
  <div id="subjects"></div>
  <br>
  <div class="import-form">
    <h4>履修科目のCSVインポート</h4>

    <%= form_with url: import_user_regist_subjects_path, class: "import-form-detail", local: true, multipart: true do |form| %>
      <div class="custom-file-input">
        <%= form.file_field :file, id: "csv_file", style: "display: none;" %>
        <label for="csv_file">ファイルを選択</label>
        <span id="file-name" style="margin-left: 1em; color: #666;"></span>
        <%= form.submit "インポート", class: "toggle-button" %>
      </div>
    <% end %>
  </div>  
</div>

<script>
  const selectElement = document.getElementById("term");
  const yearSelect = document.getElementById("year");

  const showClass = (term, year) => {
    fetch(`/courses/by_term?term=${encodeURIComponent(term)}&year=${encodeURIComponent(year)}`)
      .then(response => response.json())
      .then(data => {
        console.log("取得したデータ:", data);
        const semester = document.getElementById('semester');
        const subjects = document.getElementById('subjects');
        document.getElementById('semester').textContent = `${year}年度 ${term}`;

        subjects.innerHTML = '<em>科目をクリックすると、ここに詳細が表示されます。</em>';

        document.querySelectorAll('#timetable td[data-day]').forEach(cell => {
          cell.innerHTML = '';
          cell.removeAttribute("data-name");
          cell.removeAttribute("data-number");
          cell.style.cursor = "";
        });

        data.forEach(entry => {
          const cell = document.querySelector(`td[data-day="${entry.dayofweek}"][data-period="${entry.hour}"]`);
          if (cell) {
            const subject = entry.subject;
            cell.innerHTML = `${subject.name}<br><small>${subject.number}</small>`;
            cell.dataset.name = subject.name;
            cell.dataset.number = subject.number;
            cell.style.cursor = "pointer";

            cell.onclick = () => {
              subjects.innerHTML = `
                <p><strong>科目名:</strong> ${subject.name}</p>
                <p><strong>科目番号:</strong> ${subject.number}</p>
                <button id="delete-subject">この科目を削除</button>
              `;

              document.getElementById("delete-subject").addEventListener("click", () => {
                if (!confirm("この科目をすべての時間帯から削除しますか？")) return;

                fetch(`/courses/delete_subject?term=${encodeURIComponent(entry.semester)}&year=${encodeURIComponent(year)}&number=${encodeURIComponent(subject.number)}`, {
                  method: 'DELETE',
                  headers: {
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                    'Content-Type': 'application/json'
                  }
                })
                  .then(r => r.json())
                  .then(res => {
                    if (res.success) {
                      alert(`削除しました (${res.deleted_count} 件)`);
                      const allCells = document.querySelectorAll(`#timetable td[data-number="${subject.number}"]`);
                      allCells.forEach(c => {
                        c.innerHTML = "";
                        c.removeAttribute("data-name");
                        c.removeAttribute("data-number");
                        c.style.cursor = "";
                      });
                      subjects.innerHTML = '<em>科目をクリックすると、ここに詳細が表示されます。</em>';
                    } else {
                      alert("削除に失敗しました: " + (res.error || ""));
                    }
                  })
                  .catch(err => {
                    console.error(err);
                    alert("削除エラーが発生しました");
                  });
              });
            };
          }

          const nonPeriodSubjectsDiv = document.getElementById('non_period_subjects');
          const nonPeriodSubjects = data.filter(entry => {
            const note = (entry.note || "").toLowerCase();
            return note.includes("応談") || note.includes("集中") || note.includes("随時");
          });

          if (nonPeriodSubjects.length > 0) {
            nonPeriodSubjectsDiv.innerHTML = nonPeriodSubjects.map(entry => {
              const subject = entry.subject;
              return `
                <div class="non-period-subject" data-number="${subject.number}">
                  <strong>${subject.name}</strong>（${subject.number}）<br>
                  <small>${entry.note}</small>
                  <button data-delete="${subject.number}">削除</button>
                </div>
              `;
            }).join('');

            document.querySelectorAll('.non-period-subject button[data-delete]').forEach(button => {
              button.addEventListener('click', () => {
                const number = button.dataset.delete;
                if (!confirm("この科目を削除しますか？")) return;

                fetch(`/courses/delete_subject?term=${encodeURIComponent(selectElement.value)}&year=${encodeURIComponent(year)}&number=${encodeURIComponent(number)}`, {
                  method: 'DELETE',
                  headers: {
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                    'Content-Type': 'application/json'
                  }
                })
                  .then(r => r.json())
                  .then(res => {
                    if (res.success) {
                      alert(`削除しました (${res.deleted_count} 件)`);
                      showClass(selectElement.value); // 再読み込み
                    } else {
                      alert("削除に失敗しました: " + (res.error || ""));
                    }
                  })
                  .catch(err => {
                    console.error(err);
                    alert("削除エラーが発生しました");
                  });
              });
            });

          } else {
            nonPeriodSubjectsDiv.innerHTML = '<em>該当科目がここに表示されます</em>';
          }

        });
      });
  };

  // 初期表示（今年の現在のモジュール）
  showClass("<%= DateInfo.semester %>","<%= DateInfo.year %>");

  function tryShowClass() {
    const term = selectElement.value;
    const year = yearSelect.value;

    if (term && year) {
      showClass(term, year);
    }
  }

  selectElement.addEventListener('change', tryShowClass);
  yearSelect.addEventListener('change', tryShowClass);

  // 学期選択変更時
  selectElement.addEventListener('change', (e) => {
    const term = e.target.value;
    const year = yearSelect.value;
    showClass(term, year);
  });

  // 年度選択変更時
  yearSelect.addEventListener('change', (e) => {
    const year = e.target.value;
    const term = selectElement.value;
    showClass(term, year);
  });

  // 土曜日と7・8限の表示切替機能
  function toggleSaturday() {
    document.querySelectorAll('.sat').forEach(el => {
      el.classList.toggle('hide');
    });
    // 保存
    const isHidden = document.querySelector('.sat').classList.contains('hide');
    localStorage.setItem('hideSaturday', isHidden);
  }

  function toggleExtra() {
    document.querySelectorAll('.extra').forEach(el => {
      el.classList.toggle('hide');
    });
    // 保存
    const isHidden = document.querySelector('.extra').classList.contains('hide');
    localStorage.setItem('hideExtra', isHidden);
  }

  // 読み込み時に状態を復元
  document.addEventListener('DOMContentLoaded', () => {
    if (localStorage.getItem('hideSaturday') === 'true') {
      document.querySelectorAll('.sat').forEach(el => {
        el.classList.add('hide');
      });
    }

    if (localStorage.getItem('hideExtra') === 'true') {
      document.querySelectorAll('.extra').forEach(el => {
        el.classList.add('hide');
      });
    }
  });
</script>

