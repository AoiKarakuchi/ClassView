<% provide :title, "Map" %>

<% content_for :head do %>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin=""/>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin=""></script>
<% end %>

<script>
  // 1回だけリロードしてセッションを有効にした状態でAPIを呼び直す
  if (!window.sessionStorage.getItem("reloadedAfterLogin")) {
    window.sessionStorage.setItem("reloadedAfterLogin", "true");
    location.reload();
  } else {
    window.sessionStorage.removeItem("reloadedAfterLogin");
  }
</script>

<% 
  days = { "月" => "月曜日", "火" => "火曜日", "水" => "水曜日", "木" => "木曜日", "金" => "金曜日", "土" => "土曜日" }
  today = DateInfo.weekday 
%>

<div id="map">
  <p>読み込み中...</p>
</div>

<select id="dayofweek">
  <% days.each do |value, name| %>
    <option value="<%= value %>" <%= 'selected' if value == today %>>
      <%= name %>
    </option>
  <% end %>
</select>

<%= render "weather" %>

<button class="location-button" onclick="location.reload()">現在地に戻る</button>

<%= render "memo" %>

<script>
  const hour = "<%= DateInfo.time %>";
  const term = "<%= DateInfo.semester %>";
  const weekday = "<%= DateInfo.weekday %>";
  const year = "<%= DateInfo.year %>";
  const title = document.getElementById("title");
  const week_id = document.getElementById("dayofweek");
  const showbutton = document.getElementById("show");
  let map;
  let markerLayer;
  const Tsukuba = [36.1055282, 140.1027];
  let places = [];

  const showmap = async (youbi) => {
    try {
      places = [];
      let params = new URLSearchParams();
      if (youbi) {
        params.append('youbi', youbi);
      }
      if (markerLayer) {
        markerLayer.clearLayers();
      }
      params = params.toString();
      const url = `/map${params ? '?' : ''}${params}`;
      console.log(url);
      const response = await fetch(url);

      if (!response.ok) {
        throw new Error(`サーバーエラー: ${response.status}`);
      }

      const data = await response.json();
      data.forEach(item => {
        places.push({
          classroomname: item.name,
          subjectname: item.subject,
          latitude: item.latitude,
          longitude: item.longitude,
          hour: item.hour
        });
      });

      // 時限に応じてマーカーの色を変える
      // マーカーの定義
      const Icon = L.Icon.extend({
        options: {
          iconSize: [25, 40],
          iconAnchor: [17, 40],
          popupAnchor: [-5, -30]
        }
      });

      const blueIcon = new Icon({ iconUrl: '<%= asset_path('blue_marker.png') %>' });
      const redIcon = new Icon({ iconUrl: '<%= asset_path('red_marker.png') %>' });

      if (!map) {
        map = L.map("map").setView(Tsukuba, 14); 
        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
          attribution: "&copy; OpenStreetMap contributors",
        }).addTo(map);
        markerLayer = L.layerGroup().addTo(map);
        // L.marker(Tsukuba, {icon: redIcon}).addTo(map).bindPopup("春日エリア").openPopup();
      }

      places.map(place => {
        let isHourInclude;
        if (Array.isArray(place.hour)) {
          isHourInclude = place.hour.some(h => Number(h) == hour);
        } else {
          if (Number(place.hour) == hour) {
            isHourInclude = true;
          } else {
            isHourInclude = false;
          }
        }

        if (isHourInclude) {
          L.marker([place.latitude, place.longitude], { icon: redIcon }).addTo(markerLayer).bindPopup(place.subjectname);
        } else {
          L.marker([place.latitude, place.longitude], { icon: blueIcon }).addTo(markerLayer).bindPopup(place.subjectname);
        }
      });
    } catch (e) {
      console.error("地図表示中にエラー:", e);
    }
  };

  window.addEventListener("load", () => showmap());
  week_id.addEventListener("change", (e) => {
    const youbi = e.target.value;
    showmap(youbi);
  });

  // リロードしないと地図が見れない問題の対処
  document.addEventListener("load", () => {
    const forms = [
      ...document.querySelectorAll("form[id^='delete-form-']"),
      document.getElementById("memo-form")
    ];

    forms.forEach(form => {
      if (form) {
        form.addEventListener("submit", () => {
          setTimeout(() => location.reload(), 20);
        });
      }
    });
  });
</script>
