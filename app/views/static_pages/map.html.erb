<% provide :title, "Map" %>

<% content_for :head do %>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin=""/>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin=""></script>
<% end %>

<script>
  // 1回だけリロードしてセッションを有効にした状態でAPIを呼び直す
  if (!window.sessionStorage.getItem("reloadedAfterLogin")) {
    window.sessionStorage.setItem("reloadedAfterLogin", "true");
    location.reload();
  } else {
    window.sessionStorage.removeItem("reloadedAfterLogin");
  }
</script>

<% 
  days = { "月" => "月曜日", "火" => "火曜日", "水" => "水曜日", "木" => "木曜日", "金" => "金曜日" }
  today = DateInfo.weekday 
%>

<div id="map">
  読み込み中...
  <select id="dayofweek">
    <% days.each do |value, name| %>
      <option value="<%= value %>" <%= 'selected' if value == today %>>
        <%= name %>
      </option>
    <% end %>
  </select>
  <button class="location-button" onclick="location.reload()">現在地に戻る</button>
</div>

<div class="weather-container">
  <button class="btn btn-primary btn-sm mb-2" onclick="toggleWeather()">表示切替</button>
  
  <div id="weather-content" style="display: block;">
    <% if @current %>
      <div class>
        <div class="d-flex justify-content-center align-items-center gap-3 flex-wrap">
          <% icon_code = @current["weather"][0]["icon"] %>
          <img src="https://openweathermap.org/img/wn/<%= icon_code %>@2x.png" alt="天気アイコン" class="weather-icon">
          <div class="current-temp"><%= @current["main"]["temp"].round %>℃</div>
          <div>
            <div>湿度: <%= @current["main"]["humidity"] %>%</div>
            <div>風速: <%= @current["wind"]["speed"] %> m/s</div>
            <% if @current["rain"] && @current["rain"]["1h"] %>
              <div>直近1時間の降水量: <%= @current["rain"]["1h"] %> mm</div>
            <% end %>
          </div>
        </div>
      </div>
    <% else %>
      <p class="text-danger">現在の天気を取得できませんでした。</p>
    <% end %>

    <% if @forecasts.present? %>
      <div>
        <div class="forecast-scroll">
          <% count = 0 %>
          <% now = Time.current %>
          <% @forecasts.each do |f| %>
            <% forecast_time = Time.parse(f["dt_txt"]) %>
            <% next if forecast_time < now %>
            <% break if count >= 10 %>
            <% icon = f["weather"][0]["icon"] %>
            <div class="forecast-item">
              <div><%= forecast_time.strftime("%H:%M") %></div>
              <img src="https://openweathermap.org/img/wn/<%= icon %>@2x.png" alt="天気" class="weather-icon">
              <div><%= f["main"]["temp"].round %>℃</div>
              <div style="font-size: 0.8em;"></div>
            </div>
            <% count += 1 %>
          <% end %>
        </div>
      </div>
    <% else %>
      <p class="text-danger">天気予報のデータを取得できませんでした。</p>
    <% end %>
  </div>
</div>
  
<div class="memo-box">
  <button class="btn btn-primary btn-sm mb-2" onclick="toggleMemos()">表示切替</button>

  <div id="memo-container" style="display: block;">
    <div id="memo-list">
      <ul>
        <% @memos.each do |memo| %> 
          <% if memo.user_email == current_user.email %> 
            <li class="d-flex justify-content-between align-items-center border-bottom pb-1 mb-1">
              <%= "#{memo.content}" %>
              <%= link_to "delete", memo, data: { "turbo-method": :delete,
                                                  turbo_stream: "You sure?" }%>
            </li>
          <% end %> 
        <% end %>
      </ul>
    </div>

    <!-- 入力フォーム -->
    <div id="memo-form" class="memo-form">
      <%= form_with model: @new_memo, local: true, html: { class: "d-flex align-items-start gap-2 w-100" } do |f| %>
        <%= f.text_area :content, placeholder: "メモを入力", rows: 1, class: "form-control", style: "resize: none;" %>
        <%= f.submit "追加", class: "btn btn-primary" %>
      <% end %>
    </div>
  </div>
</div>

<script>
  const hour = "<%= DateInfo.time %>";
  const term = "<%= DateInfo.semester %>";
  const weekday = "<%= DateInfo.weekday %>";
  const year = "<%= DateInfo.year %>";
  const title = document.getElementById("title");
  const week_id = document.getElementById("dayofweek");
  const showbutton = document.getElementById("show");
  let map;
  let markerLayer;
  const Tsukuba = [36.1055282, 140.1027];
  let places = [];

  const showmap = async (youbi) => {
    try {
      places = [];
      let params = new URLSearchParams();
      if (youbi) {
        params.append('youbi', youbi);
      }
      if (markerLayer) {
        markerLayer.clearLayers();
      }
      params = params.toString();
      const url = `/map${params ? '?' : ''}${params}`;
      console.log(url);
      const response = await fetch(url);

      if (!response.ok) {
        throw new Error(`サーバーエラー: ${response.status}`);
      }

      const data = await response.json();
      data.forEach(item => {
        places.push({
          classroomname: item.name,
          subjectname: item.subject,
          latitude: item.latitude,
          longitude: item.longitude,
          hour: item.hour
        });
      });

      // 時限に応じてマーカーの色を変える
      // マーカーの定義
      const Icon = L.Icon.extend({
        options: {
          iconSize: [25, 40],
          iconAnchor: [17, 40],
          popupAnchor: [-5, -30]
        }
      });

      const blueIcon = new Icon({ iconUrl: '<%= asset_path('blue_marker.png') %>' });
      const redIcon = new Icon({ iconUrl: '<%= asset_path('red_marker.png') %>' });

      if (!map) {
        map = L.map("map").setView(Tsukuba, 14); 
        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
          attribution: "&copy; OpenStreetMap contributors",
        }).addTo(map);
        markerLayer = L.layerGroup().addTo(map);
        // L.marker(Tsukuba, {icon: redIcon}).addTo(map).bindPopup("春日エリア").openPopup();
      }

      places.map(place => {
        let isHourInclude;
        if (Array.isArray(place.hour)) {
          isHourInclude = place.hour.some(h => Number(h) == hour);
        } else {
          if (Number(place.hour) == hour) {
            isHourInclude = true;
          } else {
            isHourInclude = false;
          }
        }

        if (isHourInclude) {
          L.marker([place.latitude, place.longitude], { icon: redIcon }).addTo(markerLayer).bindPopup(place.subjectname);
        } else {
          L.marker([place.latitude, place.longitude], { icon: blueIcon }).addTo(markerLayer).bindPopup(place.subjectname);
        }
      });
    } catch (e) {
      console.error("地図表示中にエラー:", e);
    }
  };

  window.addEventListener("load", () => showmap());
  week_id.addEventListener("change", (e) => {
    const youbi = e.target.value;
    showmap(youbi);
  });

  // リロードしないと地図が見れない問題の対処
  document.addEventListener("load", () => {
    const forms = [
      ...document.querySelectorAll("form[id^='delete-form-']"),
      document.getElementById("memo-form")
    ];

    forms.forEach(form => {
      if (form) {
        form.addEventListener("submit", () => {
          setTimeout(() => location.reload(), 20);
        });
      }
    });
  });

  // メモの表示/非表示を切り替える（まとめて切り替え）
  function toggleMemos() {
    const memoContainer = document.getElementById('memo-container');
    const isHidden = memoContainer.style.display === 'none';
    memoContainer.style.display = isHidden ? 'block' : 'none';
  }

  function toggleMemos() {
    const memoContainer = document.getElementById('memo-container');
    const isHidden = memoContainer.style.display === 'none';
    memoContainer.style.display = isHidden ? 'block' : 'none';

    // localStorageに状態を保存
    localStorage.setItem('memoVisible', isHidden ? 'true' : 'false');
  }

  // ページ読み込み時に状態を復元
  document.addEventListener('DOMContentLoaded', () => {
    const memoContainer = document.getElementById('memo-container');
    const isVisible = localStorage.getItem('memoVisible');

    if (isVisible === 'false') {
      memoContainer.style.display = 'none';
    } else {
      memoContainer.style.display = 'block';
    }
  });

  // 天気の表示/非表示を切り替える
  function toggleWeather() {
    const weatherContent = document.getElementById('weather-content');
    const isHidden = weatherContent.style.display === 'none';
    weatherContent.style.display = isHidden ? 'block' : 'none';

    // localStorageに状態を保存
    localStorage.setItem('weatherVisible', isHidden ? 'true' : 'false');
  }

  document.addEventListener('DOMContentLoaded', () => {
    // メモの状態復元
    const memoContainer = document.getElementById('memo-container');
    const memoVisible = localStorage.getItem('memoVisible');
    if (memoVisible === 'false') {
      memoContainer.style.display = 'none';
    } else {
      memoContainer.style.display = 'block';
    }

    // 天気の状態復元
    const weatherContent = document.getElementById('weather-content');
    const weatherVisible = localStorage.getItem('weatherVisible');
    if (weatherVisible === 'false') {
      weatherContent.style.display = 'none';
    } else {
      weatherContent.style.display = 'block';
    }
  });
</script>
